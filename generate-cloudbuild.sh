#!/usr/bin/env bash

# because macOS (at least until High Sierra) ships with pre-4.x Bash that
# doesn't support associative arrays (declare -A).
# if your 'bash' is older: brew install bash

if [ "$BASH_VERSINFO" -lt 4 ] ; then
  echo "need at least bash 4.x to run this script" >&2
  exit 1
fi

tobuild="$(find . -mindepth 2 -maxdepth 2 -type f -name Dockerfile \
  | sort -n \
  | xargs -n 1 dirname \
  | xargs -n 1 basename)"

declare -A steps
declare -A steps_emitted
declare -A steps_deps

for step in $tobuild ; do
  steps[$step]="$({
    echo "- id: $step";
    echo "  dir: $step";
    echo "  name: 'gcr.io/cloud-builders/docker'";
    echo "  args: [ 'build', '-t', 'gcr.io/\$PROJECT_ID/$step', '.' ]";
  })"
  if [ -f "$step/dependencies" ] ; then
    steps_deps[$step]="$(cat "$step/dependencies")"
  fi
done

echo "# generated by $(basename $0)"
echo "steps:"
# attempt to order according to dependencies up to 5 levels deep.
# this horror is dedicated to Reuben
for seq in {1..5} ; do
  for step in $tobuild ; do
    # check if we've emitted all the dependencies for this step
    all_emitted=yes
    for dep in ${steps_deps[$step]} ; do
      if [ -z "${steps_emitted[$dep]}" ] ; then
        all_emitted=no
      fi
    done

    # if all dependencies for this step emitted, emit it!
    if [ "$all_emitted" = "yes" ] && [ -z "${steps_emitted[$step]}" ] ; then
      echo "${steps[$step]}"
      # ... and declare the dependencies too
      if [ -n "${steps_deps[$step]}" ] ; then
        echo '  waitFor:'
        for dep in ${steps_deps[$step]} ; do
          echo "    - $dep"
        done
      fi
      steps_emitted[$step]=yes
    fi
    unset all_emitted
  done
done

echo
echo "timeout: 30m"
echo "images:"
for step in $tobuild ; do
  echo "- 'gcr.io/\$PROJECT_ID/$step'"
done

